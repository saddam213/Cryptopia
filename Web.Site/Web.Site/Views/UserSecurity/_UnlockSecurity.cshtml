@using Cryptopia.Enums
@model Cryptopia.Common.User.UserUnlockSecurityModel
@{
	ViewBag.Title = "Cryptopia - " + Resources.User.securityUnlockHeadline;
}

<h2>@Resources.User.securityUnlockHeadline</h2>
<div class="row">
	<div class="col-md-8">
		<section>
			@using (Ajax.BeginForm("UnlockSecurity", "UserSecurity", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "securityTarget", InsertionMode = InsertionMode.Replace }, new { @class = "form-horizontal" }))
			{
				@Html.AntiForgeryToken()
				@Html.HiddenFor(m => m.Type)
				<hr />
				<div class="row">
					<div class="col-md-7 ">
						@Html.ValidationSummary(true)
					</div>
				</div>

				if (Model.Type == TwoFactorType.EmailCode)
				{
				<div class="row">
					<div class="col-md-9 ">
						<div class="alert alert-success text-center">
							<h5>@Html.Label(Resources.User.securityUnlockEmailCodeIsSentMessage)</h5>
						</div>
					</div>
				</div>

					<div class="row">
						<div class="col-md-9 text-center">
							<small>@Resources.User.securityUnlockEmailCodeMessage</small>
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(m => m.Data, Resources.User.securityUnlockEmailCodeLabel, new { @class = "col-md-2 control-label" })
						<div class="col-md-5">
							@Html.PasswordFor(m => m.Data, new { @class = "form-control input-sm", data_rule_required = "true", data_msg_required = "Email code is required", @autofocus = "autofocus" })
							@Html.ValidationMessageFor(m => m.Data, "", new { @class = "text-danger" })
						</div>
					</div>
				}

				if (Model.Type == TwoFactorType.GoogleCode)
				{
				<div class="row">
					<div class="col-md-9 text-center">
						<small>@Resources.User.securityUnlockGoogleCodeMessage</small>
					</div>
				</div>
					<div class="form-group">
						@Html.LabelFor(m => m.Data, Resources.User.securityUnlockGoogleCodeLabel, new { @class = "col-md-2 control-label" })
						<div class="col-md-5">
							@Html.PasswordFor(m => m.Data, new { @class = "form-control input-sm", data_rule_required = "true", data_msg_required = Resources.User.securityUnlockGoogleCodeRequiredError, @autofocus = "autofocus" })
							@Html.ValidationMessageFor(m => m.Data, "", new { @class = "text-danger" })
						</div>
					</div>
				}

				if (Model.Type == TwoFactorType.CryptopiaCode)
				{
					<div class="row">
						<div class="col-md-9 text-center">
							<small>@Resources.User.securityUnlockCryptopiaCodeMessage</small>
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(m => m.Data, Resources.User.securityUnlockCryptopiaCodeLabel, new { @class = "col-md-2 control-label" })
						<div class="col-md-5">
							@Html.PasswordFor(m => m.Data, new { @class = "form-control input-sm", data_rule_required = "true", data_msg_required = Resources.User.securityUnlockCryptopiaRequiredError, @autofocus = "autofocus" })
							@Html.ValidationMessageFor(m => m.Data, "", new { @class = "text-danger" })
						</div>
					</div>
				}

				if (Model.Type == TwoFactorType.PinCode)
				{
				<div class="row">
					<div class="col-md-9 text-center">
						<small>@Resources.User.securityUnlockTwoFactorCodeMessage</small>
					</div>
				</div>

					<div class="form-group">
						@Html.LabelFor(m => m.Data, Resources.User.securityUnlockTwoFactorLabel, new { @class = "col-md-2 control-label" })
						<div class="col-md-5">
							@Html.PasswordFor(m => m.Data, new { @class = "form-control input-sm", data_rule_required = "true", data_msg_required = Resources.User.securityUnlockTwoFactorRequiredError, @autofocus = "autofocus" })
							@Html.ValidationMessageFor(m => m.Data, "", new { @class = "text-danger" })
						</div>
					</div>
				}

				if (Model.Type == TwoFactorType.Password)
				{
				<div class="row">
					<div class="col-md-9 text-center">
						<small>@Resources.User.securityUnlockPasswordMessage</small>
					</div>
				</div>
					<div class="form-group">
						@Html.LabelFor(m => m.Data, Resources.User.securityUnlockPasswordLabel, new { @class = "col-md-2 control-label" })
						<div class="col-md-5">
							@Html.PasswordFor(m => m.Data, new { @class = "form-control input-sm", data_rule_required = "true", data_msg_required = Resources.User.securityUnlockPasswordRequiredError, @autofocus = "autofocus" })
							@Html.ValidationMessageFor(m => m.Data, "", new { @class = "text-danger" })
						</div>
					</div>
				}

				if (Model.Type == TwoFactorType.Question)
				{
				<div class="row">
					<div class="col-md-9 text-center">
						<small>@Resources.User.securityUnlockQuestionsMessage</small>
					</div>
				</div>
					<div class="form-group">
						@Html.LabelFor(m => m.Data, Resources.User.securityUnlockQuestion1Label, new { @class = "col-md-2 control-label" })
						<div class="col-md-5">
							@Html.TextBoxFor(m => m.Question1, new { @class = "form-control input-sm", @readonly = "readonly" })
							@Html.PasswordFor(m => m.Data, new { @class = "form-control input-sm", data_rule_required = "true", data_msg_required = Resources.User.securityUnlockAnswerRequiredError, @autofocus = "autofocus" })
							@Html.ValidationMessageFor(m => m.Data, "", new { @class = "text-danger" })
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(m => m.Data2, Resources.User.securityUnlockQuestion1Label, new { @class = "col-md-2 control-label" })
						<div class="col-md-5">
							@Html.TextBoxFor(m => m.Question2, new { @class = "form-control input-sm", @readonly = "readonly" })
							@Html.PasswordFor(m => m.Data2, new { @class = "form-control input-sm", data_rule_required = "true", data_msg_required = Resources.User.securityUnlockAnswerRequiredError })
							@Html.ValidationMessageFor(m => m.Data2, "", new { @class = "text-danger" })
						</div>
					</div>
				}

				<div class="form-group">
					<div class="col-md-offset-2 col-md-5">
						<input type="submit" value="@Resources.User.securityUnlockButton" class="btn btn-default btn-sm button-180" />
					</div>
				</div>
			}
		</section>
	</div>
</div>

@Scripts.Render("~/Scripts/Bundle/validation_bundle.min.js")