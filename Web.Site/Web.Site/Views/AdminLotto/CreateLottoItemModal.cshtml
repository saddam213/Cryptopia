@model Cryptopia.Common.Lotto.CreateLottoItemModel
@{
	Layout = "~/Views/Shared/_Modal.cshtml";
}

<div class="modal-dialog">
	<div class="modal-content">
		<div class="modal-header">
			<button class="close simplemodal-close" aria-hidden="true" type="button" onclick="$.modal.close();">×</button>
			<h3 class="modal-title">Create Lotto Item</h3>
		</div>
		@using (Ajax.BeginForm("CreateLottoItem", "Lotto", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "simplemodal-data", InsertionMode = InsertionMode.Replace }, new { @class = "form-vertical" }))
		{
		@Html.AntiForgeryToken()
			@Html.ValidationSummary(true)
			<div class="modal-body">
				<div class="row">
					<div class="col-xs-6">
						@Html.LabelFor(m => m.Name, new { @class = "control-label" })
						@Html.TextBoxFor(m => m.Name, new { @class = "form-control  input-sm" })
						@Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.CurrencyId, new { @class = "control-label" })
						@Html.DropDownListFor(m => m.CurrencyId, new SelectList(Model.Currencies.OrderBy(x => x.Symbol), "CurrencyId", "Symbol"), new { @class = "form-control  input-sm" })
					</div>
					<div class="col-xs-12">
						@Html.LabelFor(m => m.Description, new { @class = "control-label" })
						@Html.TextAreaFor(m => m.Description, new { @class = "form-control  input", rows = 6 })
						@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.LottoType, new { @class = "control-label" })
						@Html.EnumDropDownListFor(m => m.LottoType, new { @class = "form-control  input-sm" })
						@Html.ValidationMessageFor(model => model.LottoType, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.Hours, new { @class = "control-label" })
						@Html.TextBoxFor(m => m.Hours, new { @class = "form-control  input-sm" })
						@Html.ValidationMessageFor(model => model.Hours, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.NextDraw, new { @class = "control-label" })
						@Html.TextBoxFor(m => m.NextDraw, new { @class = "form-control  input-sm datepicker" })
						@Html.ValidationMessageFor(model => model.NextDraw, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.Prizes, new { @class = "control-label" })
						@Html.TextBoxFor(m => m.Prizes, new { @class = "form-control  input-sm" })
						@Html.ValidationMessageFor(model => model.Prizes, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.Rate, new { @class = "control-label" })
						@Html.TextBoxFor(m => m.Rate, "{0:F8}", new { @class = "form-control  input-sm" })
						@Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.Fee, new { @class = "control-label" })
						@Html.TextBoxFor(m => m.Fee, "{0:F8}", new { @class = "form-control  input-sm" })
						@Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger" })
					</div>
					<div class="col-xs-6">
						@Html.LabelFor(m => m.Status, new { @class = "control-label" })
						@Html.EnumDropDownListFor(m => m.Status, new { @class = "form-control  input-sm" })
						@Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<button class="btn btn-info simplemodal-close" type="button" onclick="$.modal.close();">Cancel</button>
				<button class="btn btn-info " type="submit">Create</button>
			</div>
		}

	</div>
</div>

@Scripts.Render("~/Scripts/Bundle/validation_bundle.min.js")
<script>
	$(".datepicker").datetimepicker({
		showClose: true,
		widgetPositioning: { horizontal: 'left', vertical: 'top' }
	});
</script>

