@using Cryptopia.Enums;
@model Cryptopia.Common.Withdraw.WithdrawCurrencyModel
@{
	ViewBag.Title = String.Format(Resources.UserWallet.withdrawCreatePageTitle, Model.Symbol);
	ViewBag.IsFullPage = true;
	var addressTitle = string.Format(Resources.UserWallet.withdrawCreateAddressTitle, Model.Name);
	var paymentIdTitle = Model.AddressType.ToString();
}

@using (Html.BeginForm("Create", "Withdraw", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
	@Html.AntiForgeryToken()
	@Html.HiddenFor(x => x.CurrencyId)
	@Html.HiddenFor(m => m.Type)
	@Html.HiddenFor(m => m.Symbol)
	@Html.HiddenFor(m => m.ReturnUrl)
	<div class="row withdraw-wrapper">
		<div class="col-sm-offset-1 col-md-offset-3 col-lg-offset-4 col-sm-10 col-md-6 col-lg-4 panel panel-default nopad withdraw-container">
			<div class="col-md-12">
				<div class="text-xs-center text-sm-left withdraw-title-wrapper">
					<img class="pull-left-lg pull-left-md pull-left-sm" src="@CdnHelper.RenderImage("/Content/Images/Coins/{0}-medium.png", Model.Symbol)" />
					<div class="pull-left-lg pull-left-md pull-left-sm withdraw-title-container">
						<h3 class="withdraw-title">@Model.DisplayName</h3>
						<p class="withdraw-subtitle">@Resources.UserWallet.withdrawCreateInfoText</p>
					</div>
					<div class="clearfix"></div>
				</div>
				<hr style="margin:0;margin-bottom:5px" />
				@if (Model.HasWithdrawLimit)
				{
					<div>
						<div class="progress" style="margin-bottom:0;padding-bottom:0;">
							<div class="progress-bar progress-current" style="width: @(Model.WithdrawPercent)%;"></div>
							<div class="progress-bar progress-bar-success progress-new" style="width: 0%;"></div>
						</div>
						<div class="text-center">
							@Html.Raw(String.Format(Html.Encode(Resources.UserWallet.withdrawCreateDailyLimitText),
													Model.WithdrawTotal.ToString("F2"),
													Model.WithdrawLimit.ToString("F2"),
													String.Format("<a href=\"/UserVerification\">{0}</a>", 
													              Html.Encode(Resources.UserWallet.withdrawCreateDailyLimitLink))
									 ))							
						</div>
					</div>
				}
			</div>
			@if (!string.IsNullOrEmpty(Model.Message))
			{
				<div class="col-md-12 nopad">
					<div class="alert alert-@Model.MessageType.ToLower() text-center" style="margin-bottom:0px">
						@Html.Raw(Model.Message)
					</div>
				</div>
			}
			<div class="row">
				<div class="col-md-12" style="font-size:12px">
					@Html.ModelValidationSummary()
					<div id="tfaCodeMessage" class="alert alert-success text-center" style="display: none">
						<p></p>
					</div>
				</div>
			</div>
			<div class="col-md-12">

				@if (Model.CurrencyType == CurrencyType.Fiat)
				{
					<div class="col-md-12 text-center" style="margin-bottom:5px;margin-top:5px">
						<label class="radio-inline"><input id="fiatOptionBank" type="radio" name="fiatOptions" value="Bank" checked="checked" /> @Resources.UserWallet.withdrawCreateTypeBankText</label>
						<label class="radio-inline"><input id="fiatOptionToken" type="radio" name="fiatOptions" value="Token" /> @Resources.UserWallet.withdrawCreateTypeTokenText</label>
					</div>
				}

				<div class="row">
					<div class="col-md-12">
						<label class="control-label">@Resources.UserWallet.withdrawCreateBalanceLabel</label>
						<div>
							<a id="balance">@Model.Balance.ToString("F8")</a> @Model.Symbol
						</div>
					</div>
				</div>

				@*----------Amount----------*@
				<div class="row">
					<div class="col-xs-5">
						@Html.LabelFor(m => m.Amount, new { @class = "control-label" })
						@Html.TextBoxFor(m => m.Amount, new { @class = "form-control   input-sm", min = Model.MinWithdraw, max = Model.MaxWithdraw })
					</div>
					<div style="margin-top: 8px;font-size:14px" class="col-xs-7">
						<div>
							<strong>
								@(
									Resources.UserWallet.withdrawCreateFeeLabel +
									(Model.WithdrawFeeType == WithdrawFeeType.Normal ?  String.Empty : "(" + Model.Fee.ToString("G29") + ")") +
									":"
								) 
							</strong>
							<span class="feeamount">@(Model.WithdrawFeeType == WithdrawFeeType.Normal ? Model.Fee.ToString("F" + Model.Decimals) : 0.ToString("F" + Model.Decimals))</span>
							<span> @Model.Symbol</span>
						</div>
						<div>
							<strong>@Resources.UserWallet.withdrawCreateNetLabel: </strong>
							<span>
								<span id="netamount">@(0.ToString("F" + Model.Decimals))</span>
								<span> @Model.Symbol <small style="white-space:nowrap">($<span id="nzdamount">0.00</span> NZD)</small></span>
							</span>
						</div>
					</div>
					<div class="col-md-12">
						@if (Model.Decimals < 8)
						{
							<div>
								<small style="font-size: 10px; vertical-align: top;">
									<i>@String.Format(Resources.UserWallet.withdrawCreateDecimalInfo, Model.Symbol, Model.Decimals)</i>
								</small>
							</div>
						}
						@Html.ValidationMessageFor(m => m.Amount, "", new { @class = "text-danger" })
					</div>

				</div>

				@*----------Address----------*@
				<div class="row">



					<div class="col-xs-12">
						@Html.LabelFor(m => m.AddressBook, Resources.UserWallet.withdrawCreateAddressBookLabel, new { @class = "control-label" })
						@Html.DropDownListFor(m => m.SelectedAddress, new SelectList(Model.AddressBook, "Address", "Label"),
							Model.AddressBook.Any() ? Resources.UserWallet.withdrawCreateAddressBookPlaceholder
													: String.Format(Resources.UserWallet.withdrawCreateAddressBookEmptyPlaceholder, Model.Name),
							new { @class = "form-control   input-sm", id = "AddressBook" })
						@Html.ValidationMessage("AddressBookError", new { @class = "text-danger" })
					</div>


					@if (!Model.AddressBookOnly)
					{
						<div class="col-xs-12">
							<label class="control-label fiatOptions fiatOptionToken" >@addressTitle</label>
							<label class="control-label fiatOptions fiatOptionBank" style="display:none">@Resources.UserWallet.withdrawCreateBankAccountLabel</label>
							@Html.TextBoxFor(m => m.AddressData, new { @class = "form-control input-sm", data_val = "true", data_val_required = String.Format(Resources.UserWallet.withdrawCreateBankAccountRequired, Model.Symbol) })
							@Html.ValidationMessageFor(m => m.AddressData, "", new { @class = "text-danger", })
						</div>
						if (Model.AddressType != AddressType.Standard)
						{
							<div class="col-xs-12 fiatOptions fiatOptionBank">
								<label class="control-label fiatOptions fiatOptionToken" >@paymentIdTitle</label>
								<label class="control-label fiatOptions fiatOptionBank" style="display:none">@Resources.UserWallet.withdrawCreateBankReferenceLabel</label>
								@Html.TextBoxFor(m => m.AddressData2, new { @class = "form-control input-sm" })
								@Html.ValidationMessageFor(m => m.AddressData2, "", new { @class = "text-danger" })
							</div>
						}
					}
					else
					{
						<div class="col-xs-12">
							<label class="control-label fiatOptions fiatOptionToken" >@addressTitle</label>
							<label class="control-label fiatOptions fiatOptionBank" style="display:none">@Resources.UserWallet.withdrawCreateBankAccountLabel</label>
							@Html.TextBox("AddressDataReadonly", "", new { @class = "form-control input-sm", @readonly = "readonly", @disabled = "disabled" })
						</div>
						if (Model.AddressType != AddressType.Standard)
						{
							<div class="col-xs-12 fiatOptions fiatOptionBank">
								<label class="control-label fiatOptions fiatOptionToken" >@paymentIdTitle</label>
								<label class="control-label fiatOptions fiatOptionBank" style="display:none">@Resources.UserWallet.withdrawCreateBankReferenceLabel</label>
								@Html.TextBox("AddressDataReadonly2", "", new { @class = "form-control input-sm", @readonly = "readonly", @disabled = "disabled" })
							</div>
						}
					}
				</div>

				@*----------Two Factor----------*@
				@if (Model.Type != Cryptopia.Enums.TwoFactorType.None)
				{
					<label class="control-label">@Model.UnlockSummary</label>
					if (Model.Type == Cryptopia.Enums.TwoFactorType.Question)
					{
						<div>
							@Html.LabelFor(m => m.Question1, new { @class = "control-label" })
							<div class="input-group input-group-sm">
								<span class="input-group-addon" style="min-width: 40px">Q.</span>
								@Html.TextBoxFor(m => m.Question1, new { @class = "form-control  input-sm", @disabled = "disabled" })
							</div>
							<div class="input-group input-group-sm">
								<span class="input-group-addon" style="min-width: 40px">A.</span>
								@Html.PasswordFor(model => model.Answer1, new { @class = "form-control  input-sm" })
							</div>
						</div>
						<div>
							@Html.LabelFor(m => m.Question2, new { @class = "control-label" })
							<div class="input-group input-group-sm">
								<span class="input-group-addon" style="min-width: 40px">Q.</span>
								@Html.TextBoxFor(m => m.Question2, new { @class = "form-control  input-sm", @disabled = "disabled" })
							</div>
							<div class="input-group input-group-sm">
								<span class="input-group-addon" style="min-width: 40px">A.</span>
								@Html.PasswordFor(model => model.Answer2, new { @class = "form-control  input-sm" })
							</div>
							<div>@Html.ValidationMessageFor(model => model.Answer1, "", new { @class = "text-danger" })</div>
							<div>@Html.ValidationMessageFor(model => model.Answer2, "", new { @class = "text-danger" })</div>
						</div>
					}
					else
					{
						switch (Model.Type)
						{
							case Cryptopia.Enums.TwoFactorType.EmailCode:
								<div class="input-group input-group-sm">
									@Html.PasswordFor(m => m.EmailCode, new { @class = "form-control  input-sm" })
									<span class="input-group-btn">
										<button id="sendtfacode" class="btn btn-default" type="button">Send Email Code</button>
									</span>
								</div>
								@Html.ValidationMessageFor(model => model.EmailCode, "", new { @class = "text-danger" })
								break;
							case Cryptopia.Enums.TwoFactorType.GoogleCode:
								@Html.TextBoxFor(m => m.GoogleCode, new { @class = "form-control  input-sm" })
								@Html.ValidationMessageFor(model => model.GoogleCode, "", new { @class = "text-danger" })
								break;
							case Cryptopia.Enums.TwoFactorType.CryptopiaCode:
								@Html.TextBoxFor(m => m.CryptopiaCode, new { @class = "form-control  input-sm" })
								@Html.ValidationMessageFor(model => model.CryptopiaCode, "", new { @class = "text-danger" })
								break;
							case Cryptopia.Enums.TwoFactorType.PinCode:
								@Html.PasswordFor(m => m.Pin, new { @class = "form-control  input-sm" })
								@Html.ValidationMessageFor(model => model.Pin, "", new { @class = "text-danger" })
								break;
							case Cryptopia.Enums.TwoFactorType.Password:
								@Html.PasswordFor(m => m.Password, new { @class = "form-control  input-sm" })
								@Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
								break;
							default:
								break;
						}
					}
					@Html.ValidationMessage("TwoFactorError", new { @class = "text-danger" })
				}
			</div>
			<div class="col-md-12">
				<div class="text-center withdraw-button-container">
					<div class="row">
						<div class="col-md-6">
							<a id="cancel" class="btn btn-default btnfullwidth" href="@(string.IsNullOrEmpty(Model.ReturnUrl) ? "/Withdraw" : Model.ReturnUrl)">@Cryptopia.Resources.General.Cancel</a>
						</div>
						<div class="col-md-6">
							<input id="submit" type="submit" class="btn btn-success btnfullwidth" value="@Cryptopia.Resources.General.Next" />
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-12 text-center withdraw-container-link">
				<a href="@Url.RouteUrl("WithdrawHistory")">@Resources.UserWallet.withdrawHistoryLink</a>
			</div>
		</div>
	</div>
}

@section Scripts {
	<script>
		var fees = '@Model.Fee';
		var decimals = +'@Model.Decimals';
		var feeType = '@(Model.WithdrawFeeType)';
		var pricePerCoin = +'@Model.EstimatedCoinNZD';
		var withdrawTotal = +'@Model.WithdrawTotal';
		var withdrawPercent = +'@Model.WithdrawPercent';
		var withdrawLimit = +'@Model.WithdrawLimit';
		var tfaCodeAction = '@Url.Action("SendUnlockTwoFactorCode", "TwoFactor")';
		$("#Amount").on("change keyup paste", function () {
			var amount = $(this).val();
			var newAmount = (amount * pricePerCoin);
			var currentLimit = withdrawTotal;
			var newLimit = (currentLimit + newAmount);
			var percentage = Math.abs((newLimit / withdrawLimit) * 100);
			var newpercentage = ~~(percentage - withdrawPercent);
			var totalPercent = (newpercentage + withdrawPercent);
			$("#nzdamount").text((newAmount || 0).toFixed(2));
			if (totalPercent > 100) {
				$("#submit").attr("disabled", "disabled");
				$(".progress-new").css({ "width": "0%" });
				$(".progress-current").addClass("progress-bar-danger").css({ "width": "100%" });
			}
			else {
				$("#submit").removeAttr("disabled");
				$(".progress-new").css({ "width": newpercentage + "%" });
				$(".progress-current").removeClass("progress-bar-danger").css({ "width": withdrawPercent + "%" });
			}
		});

		var Resources = Resources || {};
		Resources.WithdrawCreate = {
			SendingCodeMessage: '@Resources.UserWallet.withdrawCreateSendingCodeMessage',
			SendingCodeSuccessMessage: '@Resources.UserWallet.withdrawCreateSendingCodeSuccessMessage'
		};
	</script>
	@Scripts.Render("~/Scripts/Bundle/validation_bundle.min.js")
	@Scripts.Render("~/Scripts/Project/Withdraw/create.min.js")
}
