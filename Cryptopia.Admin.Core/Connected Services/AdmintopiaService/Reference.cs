//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptopia.Admin.Core.AdmintopiaService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionDataType", Namespace="http://schemas.datacontract.org/2004/07/Cryptopia.WalletAPI.DataObjects")]
    public enum TransactionDataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deposit = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Withdraw = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transfer = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mined = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Immature = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Orphan = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Savings = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WalletTransaction", Namespace="http://schemas.datacontract.org/2004/07/AdmintopiaService.DataObjects")]
    [System.SerializableAttribute()]
    public partial class WalletTransaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConfirmationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TxidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Confirmations {
            get {
                return this.ConfirmationsField;
            }
            set {
                if ((this.ConfirmationsField.Equals(value) != true)) {
                    this.ConfirmationsField = value;
                    this.RaisePropertyChanged("Confirmations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Txid {
            get {
                return this.TxidField;
            }
            set {
                if ((object.ReferenceEquals(this.TxidField, value) != true)) {
                    this.TxidField = value;
                    this.RaisePropertyChanged("Txid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdmintopiaService.IAdmintopiaService")]
    public interface IAdmintopiaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/GetWalletTransactions", ReplyAction="http://tempuri.org/IAdmintopiaService/GetWalletTransactionsResponse")]
        System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction> GetWalletTransactions(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/GetWalletTransactions", ReplyAction="http://tempuri.org/IAdmintopiaService/GetWalletTransactionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction>> GetWalletTransactionsAsync(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/GetWalletTransactionsSince", ReplyAction="http://tempuri.org/IAdmintopiaService/GetWalletTransactionsSinceResponse")]
        System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction> GetWalletTransactionsSince(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes, int searchBlockLength);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/GetWalletTransactionsSince", ReplyAction="http://tempuri.org/IAdmintopiaService/GetWalletTransactionsSinceResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction>> GetWalletTransactionsSinceAsync(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes, int searchBlockLength);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/BlacklistIpAddress", ReplyAction="http://tempuri.org/IAdmintopiaService/BlacklistIpAddressResponse")]
        Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist BlacklistIpAddress(string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/BlacklistIpAddress", ReplyAction="http://tempuri.org/IAdmintopiaService/BlacklistIpAddressResponse")]
        System.Threading.Tasks.Task<Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist> BlacklistIpAddressAsync(string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/GetIpAddressBlacklist", ReplyAction="http://tempuri.org/IAdmintopiaService/GetIpAddressBlacklistResponse")]
        Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist GetIpAddressBlacklist();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/GetIpAddressBlacklist", ReplyAction="http://tempuri.org/IAdmintopiaService/GetIpAddressBlacklistResponse")]
        System.Threading.Tasks.Task<Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist> GetIpAddressBlacklistAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/PurgeSiteCache", ReplyAction="http://tempuri.org/IAdmintopiaService/PurgeSiteCacheResponse")]
        Cryptopia.Infrastructure.Incapsula.Common.Enums.ResponseCode PurgeSiteCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdmintopiaService/PurgeSiteCache", ReplyAction="http://tempuri.org/IAdmintopiaService/PurgeSiteCacheResponse")]
        System.Threading.Tasks.Task<Cryptopia.Infrastructure.Incapsula.Common.Enums.ResponseCode> PurgeSiteCacheAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdmintopiaServiceChannel : Cryptopia.Admin.Core.AdmintopiaService.IAdmintopiaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdmintopiaServiceClient : System.ServiceModel.ClientBase<Cryptopia.Admin.Core.AdmintopiaService.IAdmintopiaService>, Cryptopia.Admin.Core.AdmintopiaService.IAdmintopiaService {
        
        public AdmintopiaServiceClient() {
        }
        
        public AdmintopiaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdmintopiaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdmintopiaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdmintopiaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction> GetWalletTransactions(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes) {
            return base.Channel.GetWalletTransactions(transactionDataType, currencyId, walletTimeoutMinutes);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction>> GetWalletTransactionsAsync(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes) {
            return base.Channel.GetWalletTransactionsAsync(transactionDataType, currencyId, walletTimeoutMinutes);
        }
        
        public System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction> GetWalletTransactionsSince(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes, int searchBlockLength) {
            return base.Channel.GetWalletTransactionsSince(transactionDataType, currencyId, walletTimeoutMinutes, searchBlockLength);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Cryptopia.Admin.Core.AdmintopiaService.WalletTransaction>> GetWalletTransactionsSinceAsync(Cryptopia.Admin.Core.AdmintopiaService.TransactionDataType transactionDataType, int currencyId, int walletTimeoutMinutes, int searchBlockLength) {
            return base.Channel.GetWalletTransactionsSinceAsync(transactionDataType, currencyId, walletTimeoutMinutes, searchBlockLength);
        }
        
        public Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist BlacklistIpAddress(string ipAddress) {
            return base.Channel.BlacklistIpAddress(ipAddress);
        }
        
        public System.Threading.Tasks.Task<Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist> BlacklistIpAddressAsync(string ipAddress) {
            return base.Channel.BlacklistIpAddressAsync(ipAddress);
        }
        
        public Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist GetIpAddressBlacklist() {
            return base.Channel.GetIpAddressBlacklist();
        }
        
        public System.Threading.Tasks.Task<Cryptopia.Infrastructure.Incapsula.Common.Classes.IPBlacklist> GetIpAddressBlacklistAsync() {
            return base.Channel.GetIpAddressBlacklistAsync();
        }
        
        public Cryptopia.Infrastructure.Incapsula.Common.Enums.ResponseCode PurgeSiteCache() {
            return base.Channel.PurgeSiteCache();
        }
        
        public System.Threading.Tasks.Task<Cryptopia.Infrastructure.Incapsula.Common.Enums.ResponseCode> PurgeSiteCacheAsync() {
            return base.Channel.PurgeSiteCacheAsync();
        }
    }
}
